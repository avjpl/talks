
### Either

--

```
const Left = function(x) {
  this.__value = x
}

Left.of = function(x) {
  return new Left(x)
}

Left.prototype.map = function(f) {
  return this
}

const Right = function(x) {
  this.__value = x
}

Right.of = function(x) {
  return new Right(x)
}

Right.prototype.map = function(fn) {
  return Right.of(fn(this.__value))
}
```

* `Left` and `Right` are subclasses of an abstract type called `Either`

---
* Similar to Maybe but Left branch can carry an error message (or whatever)
* Function being called don't need to know about functors - we use `map` to "lift" the function
  * c.f. array map

3





--

* Can rewrite using `compose`:

```
// domainToEmail :: String -> String
const domainToEmail = R.compose(R.concat('@'), R.nth(0), R.match(/[a-z]*\.com/))

const urlEmail = url.map(domainToEmail)
```
